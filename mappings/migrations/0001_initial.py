# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-04-11 06:10
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import djchoices.choices


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('heroes', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Losses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('game_mode', models.PositiveSmallIntegerField(choices=[(0, 'Unknown'), (1, 'All Pick'), (2, "Captain's Mode"), (3, 'Random Draft'), (4, 'Single Draft'), (5, 'All Random')], default=1, validators=[djchoices.choices.ChoicesValidator({0: 'Unknown', 1: 'All Pick', 2: "Captain's Mode", 3: 'Random Draft', 4: 'Single Draft', 5: 'All Random'})])),
                ('count', models.PositiveIntegerField(default=0, verbose_name='Total no. of wins')),
                ('average_gpm', models.PositiveIntegerField(default=0, verbose_name='Average Gold per Min against that hero')),
                ('average_xpm', models.PositiveIntegerField(default=0, verbose_name='Average Experience per Min against that hero')),
                ('average_kills', models.PositiveIntegerField(default=0)),
                ('average_deaths', models.PositiveIntegerField(default=0)),
                ('average_assists', models.PositiveIntegerField(default=0)),
                ('average_hero_damage', models.PositiveIntegerField(default=0)),
                ('average_hero_healing', models.PositiveIntegerField(default=0)),
                ('average_tower_damage', models.PositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'hero_losses',
            },
        ),
        migrations.CreateModel(
            name='VersusHero',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('hero', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='heroes.DotaHero')),
                ('losses', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mappings.Losses')),
                ('versus_hero', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='heroes.DotaHero')),
            ],
            options={
                'db_table': 'versus_mappings',
            },
        ),
        migrations.CreateModel(
            name='Wins',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('game_mode', models.PositiveSmallIntegerField(choices=[(0, 'Unknown'), (1, 'All Pick'), (2, "Captain's Mode"), (3, 'Random Draft'), (4, 'Single Draft'), (5, 'All Random')], default=1, validators=[djchoices.choices.ChoicesValidator({0: 'Unknown', 1: 'All Pick', 2: "Captain's Mode", 3: 'Random Draft', 4: 'Single Draft', 5: 'All Random'})])),
                ('count', models.PositiveIntegerField(default=0, verbose_name='Total no. of wins')),
                ('average_gpm', models.PositiveIntegerField(default=0, verbose_name='Average Gold per Min against that hero')),
                ('average_xpm', models.PositiveIntegerField(default=0, verbose_name='Average Experience per Min against that hero')),
                ('average_kills', models.PositiveIntegerField(default=0)),
                ('average_deaths', models.PositiveIntegerField(default=0)),
                ('average_assists', models.PositiveIntegerField(default=0)),
                ('average_hero_damage', models.PositiveIntegerField(default=0)),
                ('average_hero_healing', models.PositiveIntegerField(default=0)),
                ('average_tower_damage', models.PositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'hero_wins',
            },
        ),
        migrations.CreateModel(
            name='WithHero',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('hero', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='heroes.DotaHero')),
                ('losses', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mappings.Losses')),
                ('wins', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mappings.Wins')),
                ('with_hero', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='heroes.DotaHero')),
            ],
            options={
                'db_table': 'with_mappings',
            },
        ),
        migrations.AddField(
            model_name='versushero',
            name='wins',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mappings.Wins'),
        ),
        migrations.AlterUniqueTogether(
            name='withhero',
            unique_together=set([('hero', 'with_hero')]),
        ),
        migrations.AlterUniqueTogether(
            name='versushero',
            unique_together=set([('hero', 'versus_hero')]),
        ),
    ]
